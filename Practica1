#include "LedControl.h"

#define POTPIN A0
#define PADSIZE 3
#define BALL_DELAY 200
#define GAME_DELAY 10
#define BOUNCE_VERTICAL 1
#define BOUNCE_HORIZONTAL -1
#define NEW_GAME_ANIMATION_SPEED 20
#define NONE 0
#define HIT 1
#define PAUSE 48
#define LEFT A1
#define RIGHT A2

LedControl lc = LedControl(51,52,53,1);

byte matriz[]{
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B00000000,
};
byte conteo[3][8]{
  // 3 [0] -> [7]
  {
    B00111110,
    B01000001,
    B00000001,
    B00111111,
    B00111111,
    B00000001,
    B01000001,
    B00111110
  },
  // 2 [8] -> [15]
  {
    B00111110,
    B01100011,
    B00000011,
    B00000110,
    B00001100,
    B00011000,
    B00110000,
    B01111111
  },
  // 1 [16] -> [23]
  {
    B00011100,
    B00111100,
    B01101100,
    B11001100,
    B00001100,
    B00001100,
    B00001100,
    B00001100
  }
};

byte matrizAux[8];

byte letrero[] = {B00000000,
               B00000000,
               B00000000,
               B00111100,
               B00100000,
               B00101100,
               B00100100,
               B00111100,
               B00000000,
               B00011000,
               B00001000,
               B00001000,
               B00001000,
               B00011100,
               B00000000,
               B00011100,
               B00000100,
               B00011100,
               B00010000,
               B00011100,
               B00000000
               };


byte letrero2[]{
         // G
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B01111110,
      B01000000,
      B01000000,
      B01001110,
      B01000010,
      B01111110,
      B00000000,
         // 12
      B01101111,
      B01101001,
      B01100001,
      B01100010,
      B01100100,
      B01101111,
         // -
      B00000000,
      B01111110,
      B01111110,
      B00000000,
         // S
      B01111110,
      B01000000,
      B01000000,
      B01111110,
      B00000010,
      B01111110,
      B00000000,
         // E
      B01111110,
      B01000000,
      B01000000,
      B01111110,
      B01000000,
      B01111110,
      B00000000,
         // C
      B01111110,
      B01000000,
      B01000000,
      B01000000,
      B01000000,
      B01111110,
      B00000000,
         // C
      B01111110,
      B01000000,
      B01000000,
      B01000000,
      B01000000,
      B01111110,
      B00000000,
          // I
      B00011000,
      B00011000,
      B00000000,
      B00011000,
      B00011000,
      B00011000,
      B00000000,
         // O
      B01111110,
      B01000010,
      B01000010,
      B01000010,
      B01000010,
      B01111110,
      B00000000,
         // N
      B01000010,
      B01100010,
      B01010010,
      B01001010,
      B01000110,
      B01000010,
      B00000000,
         // A
      B01111110,
      B01000010,
      B01000010,
      B01111110,
      B01000010,
      B01000010,
         // -

      B00000000,
      B01111110,
      B01111110,
      B00000000,
 
         // P
      B01111110,
      B01000010,
      B01111110,
      B01000000,
      B01000000,
      B01000000,
      B00000000,
         // R
      B01111110,
      B01000010,
      B01111110,
      B01010000,
      B01001000,
      B01000100,
      B00000000,
         // A
      B01111110,
      B01000010,
      B01000010,
      B01111110,
      B01000010,
      B01000010,
      B00000000,
         // C
      B01111110,
      B01000000,
      B01000000,
      B01000000,
      B01000000,
      B01111110,
      B00000000,
         // T
      B01111110,
      B00011000,
      B00011000,
      B00011000,
      B00011000,
      B00011000,
      B00000000,
         // I
      B00011000,
      B00011000,
      B00000000,
      B00011000,
      B00011000,
      B00011000,
      B00000000,
         // C
      B01111110,
      B01000000,
      B01000000,
      B01000000,
      B01000000,
      B01111110,
      B00000000,
         // A
      B01111110,
      B01000010,
      B01000010,
      B01111110,
      B01000010,
      B01000010,
      B00000000,
         // 1
      B01111000,
      B01111000,
      B00011000,
      B00011000,
      B00011000,
      B01111110,   
};

const int fila[8] = {
  22, 32, 31, 28, 45, 33, 43, 37
};
const int columna[8] = {
  30, 41, 39, 24, 35, 26, 34, 36
};


 
//-------------------JUEGO---------------------//
int xball;
int yball;
int yball_prev;

int x2_ball;
int y2_ball;
int y2_ball_prev;

byte xpad=0;

int tiempo=0;
int nivel=200;

bool border=false;
//----------------LETRERO---------------------//
int velocidad = 0;
boolean modo1 = true;
boolean arriba = true;
int count = 0;
int minimo = 0;
int showing = 0; 
 
void setColumns(byte b) {
    digitalWrite(36, (~b >> 0) & 0x01);
    digitalWrite(34, (~b >> 1) & 0x01); 
    digitalWrite(26, (~b >> 2) & 0x01); 
    digitalWrite(35, (~b >> 3) & 0x01);
    digitalWrite(24, (~b >> 4) & 0x01); 
    digitalWrite(39, (~b >> 5) & 0x01); 
    digitalWrite(41, (~b >> 6) & 0x01); 
    digitalWrite(30, (~b >> 7) & 0x01);    
}


void pintarLedControlArAb(byte fila){
  for(int i = 7; i > 0; i--){
    matrizAux[i] = matrizAux[i-1];
    lc.setRow(0, i, matrizAux[i]);
  }
  matrizAux[0] = fila;
  lc.setRow(0, 0, matrizAux[0]);  
  
}

void pintarLedControlAbAr(byte fila){

  for(int i = 0; i < 7; i++){
    matrizAux[i] = matrizAux[i+1];
    lc.setRow(0, i, matrizAux[i]);
  }
  matrizAux[7] = fila;
  lc.setRow(0, 7, matrizAux[7]);
}
 void Mostrar(byte buffer2[]){    
 
  while(minimo<147 && digitalRead(40)== LOW&&digitalRead(50)==LOW){
      velocidad = analogRead(A0);
      int cont = 0;
      for (int i = minimo; i < (minimo+8); i++) {
        digitalWrite(fila[cont], HIGH);        
        if(i<147){
          setColumns(buffer2[i]); 
        } else {
          setColumns(B00000000);
          } 
        delay(1); 
        digitalWrite(fila[cont], LOW);
        cont++;
    }  
      pintarLedControlAbAr(buffer2[minimo]);
      minimo++;
      delay(velocidad);  

      if(minimo>146){
        minimo=0;
      }
   }
   while(minimo>=0 && digitalRead(40)== HIGH&&digitalRead(50)==LOW){
      velocidad = analogRead(A0);
      int cont = 0;  
      for (int i = minimo; i < (minimo+8); i++) {             
        if(i<147){
          setColumns(buffer2[i]); 
        } else {
          setColumns(B00000000); 
          } 
        digitalWrite(fila[cont], HIGH); 
        delayMicroseconds(900); 
         digitalWrite(fila[cont], LOW);
        cont++;
      } 
    int x = 0;
      for(int i = 8; i>0 ;i--){             
        if((minimo-i)>=0){
          lc.setRow(0, x, buffer2[minimo-i]);
        } else {
          lc.setRow(0, x, 0);
        } 
        x++;       
      }             
      minimo--;
       delay(velocidad);  
      
      if(minimo<0){
        minimo=146;
      }
   }

}
byte sad[8]={
  
}

void newGame() {
   lc.clearDisplay(0);
   xball=3;
   x2_ball = 6;
   yball = 9;
   y2_ball=15;
    lc.clearDisplay(0);
}

void contar(){
  for(int i = 0; i < 3;i++){
    for(int j = 0; j < 8; j++){
      lc.setRow(0, j, conteo[i][j]);
    }
    delay(1000);
  }
}
 
void setPad() {
   if(digitalRead(47)==HIGH){
      if(xpad>0){
        xpad--;
     
        }
    }
    if(digitalRead(49)==HIGH){
      if(xpad<6){
           xpad++;
        
      }
     }
     
}

int hitFirst() {
    if(yball != 6 || xball < xpad || xball > xpad + PADSIZE){
        return NONE;
    }
    else if(xball == xpad + PADSIZE / 2||xball < xpad + PADSIZE / 2||xball == xpad + 2){
        return HIT;
    } 
}


int hitSecond() {
    if(y2_ball != 6 || x2_ball < xpad || x2_ball > xpad + PADSIZE){
        return NONE;
    }
    if(x2_ball == xpad + PADSIZE / 2||x2_ball < xpad + PADSIZE / 2||x2_ball == xpad +2){
        return HIT;
    }
}
 
 
bool checkLoose() {
    return (yball == 6 && (hitFirst() ==HIT))||(y2_ball==6&&(hitSecond()==HIT));
}
 
void moveBall() {

    if(yball==7){
      xball = random(2, 6);
      yball_prev=7;
      yball=15;
    }
    
    if(yball>7){
      if(yball==8){
      yball=0;  
      }
      else{
      yball--;
      }
    }
    else{
      yball_prev = yball;
      yball++;  
    }

//Second enemy
    if(y2_ball==7){
      x2_ball = random(2, 6);
      y2_ball_prev=7;
      y2_ball=15;
    }
    
    if(y2_ball>7){
      if(y2_ball==8){
      y2_ball=0;  
      }
      else{
      y2_ball--;
      }
    }
    else{
      y2_ball_prev = y2_ball;
      y2_ball++;  
    }

    

}




void encenderPos(int x, int y,int x2, int y2){

  if(x<8&&x2==8){
    digitalWrite(columna[x],LOW);
    digitalWrite(fila[y],HIGH);
    delay(200);
    digitalWrite(columna[x],LOW);
    digitalWrite(fila[y],LOW); 
   }
   
    else if(x2<8&&x==8){
    digitalWrite(columna[x2],LOW);
    digitalWrite(fila[y2],HIGH);
    delay(200);
    digitalWrite(columna[x2],LOW);
    digitalWrite(fila[y2],LOW);
    }
    
    if(x<8&&x2<8){
   
    digitalWrite(columna[x],LOW);
    digitalWrite(fila[y],HIGH);
    delay(1);
    digitalWrite(columna[x],HIGH);
    digitalWrite(fila[y],LOW);
    
    digitalWrite(columna[x2],LOW);
    digitalWrite(fila[y2],HIGH);
    delay(1);
    digitalWrite(columna[x2],HIGH);
    digitalWrite(fila[y2],LOW);
     
}
    
}
 
 
void deleteData(){
  
  for(int i = 0; i < 8; i++){
    pinMode(columna[i],OUTPUT);
    pinMode(fila[i],OUTPUT);
    digitalWrite(columna[i],HIGH);
    digitalWrite(fila[i],LOW);
  }
}


void drawGame() {
 
  int tempY=0;
  int tempX=0;
  int tempY2=0;
  int tempX2=0;
    
   if(yball>7){
      tempY=15-yball;
      tempX=7-xball;
   }
   else{
      tempY=8;
      tempX=8;
       if(yball_prev != yball){
        lc.setRow(0, yball_prev, 0);
    }
    lc.setRow(0, yball, byte(1 << (xball)));

    }
    
   if(y2_ball>7){
      tempY2=15-y2_ball;
      tempX2=7-x2_ball;
   }
 else{
    tempY2=8;
     tempX2=8;
    if(y2_ball_prev != y2_ball){
        lc.setRow(0, y2_ball_prev, 0);
    }
    lc.setRow(0, y2_ball, byte(1 << (x2_ball)));
 }
 encenderPos(tempX,tempY,tempX2,tempY2);
 deleteData();
    
    byte padmap = byte(0xFF >> (8 - PADSIZE) << xpad) ;
    lc.setRow(0, 7, padmap);
}


void setup() {

//---------LETRERO----------//
  for (int i = 0; i < 8; i++) {    
  pinMode(columna[i], OUTPUT);
  pinMode(fila[i], OUTPUT);
  }
  pinMode(40, INPUT);

//---------JUEGO------------//
  pinMode(POTPIN, INPUT);
  pinMode(PAUSE, INPUT);
  pinMode(47, INPUT);
  pinMode(49, INPUT);
  pinMode(50,INPUT);

 
  lc.shutdown(0,false);
  lc.setIntensity(0, 8);
  lc.clearDisplay(0);

  deleteData();

}

void stop(){
 
    for(int r = 0; r < 8; r++){
        for(int c = 0; c < 8; c++){
            lc.setLed(0, r, c, HIGH);
            delay(NEW_GAME_ANIMATION_SPEED);
        }
    }
 
  }
void loop() {
int current=0;
int cntMenu=0;
  if(showing==0){
    if(digitalRead(50)==LOW){

    Mostrar(letrero2);
    }else{
      cntMenu=0;
        while(digitalRead(50)==HIGH){
        delay(1000);
       cntMenu++;
    if(cntMenu == 3){
     lc.clearDisplay(0);
     deleteData();
     newGame();
     showing = 1;
     current=1;
     break;
   }
      }
  
     }
 
  }

  else if(showing == 1){

    if(current==1){
      lc.clearDisplay(0);
      contar();
      current=0;
      lc.clearDisplay(0);
    }

    moveBall();
    delay(nivel);
    drawGame();
    setPad();
    tiempo++;

    if(tiempo%40==0){
      if(tiempo!=0){
        int temp=nivel-20;
        
        if(temp<=0){
          temp=1;
        }else{
          nivel=nivel-20;
          }
       }
    }
    if(checkLoose()) {
      border=false;
      xpad=0;
      delay(1000);
      lc.clearDisplay(0);
      deleteData();
      tiempo=0;
      nivel=200;
      showing=0;
    }

   cntMenu=0;
   while(digitalRead(50)==HIGH){
       delay(1000);
       lc.clearDisplay(0);
       showing=2;
       stop();
    }
    delay(10);
}
 else if(showing == 2){
        cntMenu=0;
   while(digitalRead(50)==HIGH){
       delay(1000);
       lc.clearDisplay(0);
       contar();
       lc.clearDisplay(0);
       showing=1;
    }
      }
}




